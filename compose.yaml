version: '3.7'

x-minio-common: &minio-common
  image: quay.io/minio/minio:latest
  command: server --console-address ":9090" ./mnt/data
  container_name: "minio"
  environment:
    - MINIO_ROOT_USER=minioadmin
    - MINIO_ROOT_PASSWORD=minioadmin
  ports:
    - '9000:9000'  # Port for S3 API
    - '9090:9090'  # Port for MinIO console
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

services:
  minio1:
    <<: *minio-common
    hostname: minio1
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_BROWSER=on
      - MINIO_VOLUMES=/mnt/data
    volumes:
      - type: bind
        source: ./minio_storage/mnt/data/compose
        target: /mnt/data

  postgres:
    image: postgres:latest
    container_name: "postgres"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data

  python-exec:
    image: python:3.10-slim
    container_name: python-container
    command: tail -f /dev/null

  app: # Ваше Spring-приложение
    build:
      context: .  # Контекст сборки - директория с Dockerfile
      dockerfile: Dockerfile  # Имя Dockerfile (по умолчанию Dockerfile)
    container_name: spring-app
    ports:
      - '8080:8080'  # Порт для доступа к вашему приложению
    depends_on:
      - postgres  # Убедитесь, что Postgres доступен перед запуском приложения
      - minio1    # Убедитесь, что MinIO доступен перед запуском приложения
      - python-exec # Убедитесь, что Python доступен перед запуском приложения


volumes:
  postgres_data: